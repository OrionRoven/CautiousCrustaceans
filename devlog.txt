Cautious Crustaceans
Orion Roven
Jonathan Song
Joshua Yagupsky
pd 7
---------------------
Scheme/Lisp interpreter


/////////// Zone of Reflection \\\\\\\\\\\
------------------------------------------
OBSTACLES OVERCOME
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
* Our code works by pushing tokens into a stack that come from a .scm file and are split on white space.
* In some cases, the stack approach, which worked well for simple math expressions, was difficult for more complicated expressions. We needed a pre-processing step to modify "loop" and "if" statements so that they could be properly read by the interpreter.
* The stack-based interpreter naturally reads statements in a right to left order. When we have multiple expressions in a sequence, this originally caused the execution order to be reversed. We were able to fix this in the preprocessing stage, where we came up with an algorithm called "flippydo". 

UNRESOLVED ISSUES
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

COOL STUFF LEARNED
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
* useDelimiter() for scanner
* HashMaps are like Python dictionaries, but in Java
* List.subList() allows you to take Rust-like mutable slices of collections.
* Collections.swap(), Collections.reverse(), and Collections.rotate() are easy ways to swap elements in a collection, reverse an entire collection, or rotate a collection by some amount.

MID-DEVELOPMENT DESIGN CHANGES
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
* The String type which we had planned went undeveloped, as our code was already quite complicated. We didn't have enough time to implement a system of functions, although one could probably adapt our variable and control flow code to allow functions to be called as seperate Interpreter instances.


LESSONS LEARNED
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
* Being realistic about a project is important. Running into bugs is common, and fixing them takes longer than you think.
* A well-planned project with slow execution will take far less time than a poorly planned one where you implement ideas quickly.



 ______   ______   __   __   __       ______   _______
/_____/\ /_____/\ /_/\ /_/\ /_/\     /_____/\ /______/\
\:::_ \ \\::::_\/_\:\ \\ \ \\:\ \    \:::_ \ \\::::__\/__
 \:\ \ \ \\:\/___/\\:\ \\ \ \\:\ \    \:\ \ \ \\:\ /____/\
  \:\ \ \ \\::___\/_\:\_/.:\ \\:\ \____\:\ \ \ \\:\\_  _\/
   \:\/.:| |\:\____/\\ ..::/ / \:\/___/\\:\_\ \ \\:\_\ \ \
    \____/_/ \_____\/ \___/_(   \_____\/ \_____\/ \_____\/
==============================================================


2022-05-25
--------------------------------------------------------------
Orion :: Added the ability to read in Scheme from an .scm file, and formatted this text so that it's ready to be passed into the interpreter.
==============================================================

2022-05-26
--------------------------------------------------------------
Orion :: Uploaded flag
==============================================================

2022-05-27
--------------------------------------------------------------
Jonathan :: Worked on evaluating expressions exhibiting prefix notation
Joshua :: Got single operation expressions working
==============================================================

2022-05-31
--------------------------------------------------------------
Orion :: Implemented division as it works in Java, including integer division.
Jonathan :: Added floating point arithmetic
Joshua :: Created flowchart showing different states of our program
==============================================================

2022-06-01
--------------------------------------------------------------
Orion :: Implemented variables, but only in the form ( / 6 x ) ( let x 12.0 ) where the let statement is on the right
==============================================================

2022-06-02
--------------------------------------------------------------
Orion :: Implemented assigning variables to variables e.g. (/ 6 y) (let y x) (let x 12.0)
Joshua :: Fixed parenthesis bug (no longer require spaces between each token)
==============================================================

2022-06-03
--------------------------------------------------------------
Orion, Joshua & Jonathan :: Began work on boolean values and operations (and, or, not)
==============================================================

2022-06-05
--------------------------------------------------------------
Joshua :: Finished work started 2022-06-03
==============================================================

2022-06-07
--------------------------------------------------------------
Orion, Joshua & Jonathan :: Attempted to fix flippydoo (code currently reads from right to left so we need to flip everything within the parenthesis and the flip the entire thing before we split on white space)
==============================================================

2022-06-09
--------------------------------------------------------------
Orion, Joshua & Jonathan :: Planned out the conditional and looping functionality.
==============================================================

2022-06-09
--------------------------------------------------------------
Orion, Joshua & Jonathan :: Fixed flippydoo. Added the break, println, loop, and if keywords. Moved from a String[] representing the tokens to a List<String>. Created a program which calculates Euler's number to arbitrary precision. Added the option to write programs in the terminal.
==============================================================
